# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LxU1w2rQ6_uL0jFiQAJkU-RDgMnIYd4N
"""

!pip install scikit-fuzzy==0.4.2

"""
Sistema Fuzzy - Risco de Falha em Motores Elétricos
"""

import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl

# Definição das variáveis fuzzy (entradas e saída)
umidade = ctrl.Antecedent(np.arange(0, 101, 1), 'umidade')
fator_potencia = ctrl.Antecedent(np.arange(0.0, 1.01, 0.01), 'fator_potencia')
ruido = ctrl.Antecedent(np.arange(20, 101, 1), 'ruido')
vibracao = ctrl.Antecedent(np.arange(0, 11, 0.1), 'vibracao')
tempo_operacao = ctrl.Antecedent(np.arange(0, 25, 1), 'tempo_operacao')
risco_falha = ctrl.Consequent(np.arange(0, 101, 1), 'risco_falha')

# Definindo os conjuntos fuzzy para cada variável de entrada
# Cada conjunto representa uma categoria qualitativa dos valores numéricos

# Umidade: baixa, normal ou alta
umidade['baixa'] = fuzz.trapmf(umidade.universe, [0, 0, 25, 40])
umidade['normal'] = fuzz.trimf(umidade.universe, [30, 50, 70])
umidade['alta'] = fuzz.trapmf(umidade.universe, [60, 80, 100, 100])

# Fator de potência: ruim, regular ou bom
fator_potencia['ruim'] = fuzz.trapmf(fator_potencia.universe, [0.0, 0.0, 0.6, 0.75])
fator_potencia['regular'] = fuzz.trimf(fator_potencia.universe, [0.7, 0.8, 0.9])
fator_potencia['bom'] = fuzz.trapmf(fator_potencia.universe, [0.85, 0.9, 1.0, 1.0])

# Ruído: baixo, moderado ou alto
ruido['baixo'] = fuzz.trapmf(ruido.universe, [20, 20, 40, 55])
ruido['moderado'] = fuzz.trimf(ruido.universe, [45, 60, 75])
ruido['alto'] = fuzz.trapmf(ruido.universe, [70, 85, 100, 100])

# Vibração: leve, moderada ou severa
vibracao['leve'] = fuzz.gaussmf(vibracao.universe, 1.5, 0.8)
vibracao['moderada'] = fuzz.gaussmf(vibracao.universe, 4.0, 1.0)
vibracao['severa'] = fuzz.gaussmf(vibracao.universe, 7.5, 1.2)

# Tempo de operação: curto, médio ou longo
tempo_operacao['curto'] = fuzz.trapmf(tempo_operacao.universe, [0, 0, 4, 8])
tempo_operacao['medio'] = fuzz.trimf(tempo_operacao.universe, [6, 12, 18])
tempo_operacao['longo'] = fuzz.trapmf(tempo_operacao.universe, [16, 20, 24, 24])

# Saída: risco de falha, classificado como baixo, médio ou alto
risco_falha['baixo'] = fuzz.trapmf(risco_falha.universe, [0, 0, 20, 35])
risco_falha['medio'] = fuzz.trimf(risco_falha.universe, [25, 50, 75])
risco_falha['alto'] = fuzz.trapmf(risco_falha.universe, [65, 80, 100, 100])

# Definição das regras fuzzy - processamento fuzzy
# Relacionam as variáveis de entrada com a saída

regra1 = ctrl.Rule(umidade['alta'] & fator_potencia['ruim'], risco_falha['alto'])
regra2 = ctrl.Rule(vibracao['severa'] | ruido['alto'], risco_falha['alto'])
regra3 = ctrl.Rule(fator_potencia['ruim'] & tempo_operacao['longo'], risco_falha['alto'])
regra4 = ctrl.Rule(umidade['alta'] & vibracao['severa'], risco_falha['alto'])
regra5 = ctrl.Rule(ruido['alto'] & tempo_operacao['longo'], risco_falha['alto'])

regra6 = ctrl.Rule(umidade['normal'] & fator_potencia['regular'], risco_falha['medio'])
regra7 = ctrl.Rule(vibracao['moderada'] & ruido['moderado'], risco_falha['medio'])
regra8 = ctrl.Rule(tempo_operacao['medio'] & fator_potencia['regular'], risco_falha['medio'])
regra9 = ctrl.Rule(umidade['alta'] & fator_potencia['bom'], risco_falha['medio'])
regra10 = ctrl.Rule(vibracao['moderada'] & tempo_operacao['longo'], risco_falha['medio'])

regra11 = ctrl.Rule(umidade['baixa'] & fator_potencia['bom'], risco_falha['baixo'])
regra12 = ctrl.Rule(vibracao['leve'] & ruido['baixo'], risco_falha['baixo'])
regra13 = ctrl.Rule(fator_potencia['bom'] & tempo_operacao['curto'], risco_falha['baixo'])
regra14 = ctrl.Rule(umidade['baixa'] & vibracao['leve'] & ruido['baixo'], risco_falha['baixo'])
regra15 = ctrl.Rule(fator_potencia['bom'] & ruido['baixo'] & tempo_operacao['curto'], risco_falha['baixo'])

# Sistema de controle fuzzy criado com as regras
sistema = ctrl.ControlSystem([regra1, regra2, regra3, regra4, regra5, regra6, regra7,
                             regra8, regra9, regra10, regra11, regra12, regra13, regra14, regra15])
simulador = ctrl.ControlSystemSimulation(sistema)

# Função para realizar a análise manual
def analise_motor():
    try:
        print("=== SISTEMA FUZZY - RISCO DE FALHA EM MOTORES ===")

        # Entrada de dados pelo usuário - etapa de entrada do sistema
        u = float(input("Umidade (0-100%): "))
        fp = float(input("Fator de potência (0.0-1.0): "))
        r = float(input("Ruído (20-100 dB): "))
        v = float(input("Vibração (0-10 mm/s): "))
        t = float(input("Tempo operação (0-24h): "))

        # Mostra as entradas
        print(f"\nEntradas:")
        print(f"Umidade: {u}%")
        print(f"Fator de potência: {fp}")
        print(f"Ruído: {r} dB")
        print(f"Vibração: {v} mm/s")
        print(f"Tempo: {t} h")

        # Etapa de fuzzificação: calcula o grau de pertinência de cada entrada nos conjuntos fuzzy
        print("\nGraus de pertinência:")

        print("→ Umidade:")
        for termo in umidade.terms:
            grau = fuzz.interp_membership(umidade.universe, umidade[termo].mf, u)
            if grau > 0:
                print(f"   {termo}: {grau:.2%}")

        print("→ Fator de Potência:")
        for termo in fator_potencia.terms:
            grau = fuzz.interp_membership(fator_potencia.universe, fator_potencia[termo].mf, fp)
            if grau > 0:
                print(f"   {termo}: {grau:.2%}")

        print("→ Ruído:")
        for termo in ruido.terms:
            grau = fuzz.interp_membership(ruido.universe, ruido[termo].mf, r)
            if grau > 0:
                print(f"   {termo}: {grau:.2%}")

        print("→ Vibração:")
        for termo in vibracao.terms:
            grau = fuzz.interp_membership(vibracao.universe, vibracao[termo].mf, v)
            if grau > 0:
                print(f"   {termo}: {grau:.2%}")

        print("→ Tempo:")
        for termo in tempo_operacao.terms:
            grau = fuzz.interp_membership(tempo_operacao.universe, tempo_operacao[termo].mf, t)
            if grau > 0:
                print(f"   {termo}: {grau:.2%}")

        # Atribui as entradas ao simulador
        simulador.input['umidade'] = u
        simulador.input['fator_potencia'] = fp
        simulador.input['ruido'] = r
        simulador.input['vibracao'] = v
        simulador.input['tempo_operacao'] = t

        # Processamento fuzzy: aplicação das regras e defuzzificação
        simulador.compute()
        resultado = simulador.output['risco_falha']

        # Classificação da saída - resultado final
        if resultado <= 35:
            status = "BAIXO"
        elif resultado <= 75:
            status = "MÉDIO"
        else:
            status = "ALTO"

        print(f"\nResultado: Risco de Falha = {resultado:.2f}% ({status})")

        # Opcional: exibir gráfico da função de saída
        mostrar = input("\nExibir gráfico? (s/n): ")
        if mostrar.lower() == 's':
            risco_falha.view(sim=simulador)

    except Exception as e:
        print(f"Erro: {e}")

# Função para testar automaticamente 5 cenários - demonstração rápida do sistema
def teste_cenarios():
    cenarios = [
        {'u': 85, 'fp': 0.55, 'r': 90, 'v': 8.0, 't': 22},
        {'u': 45, 'fp': 0.85, 'r': 55, 'v': 2.5, 't': 10},
        {'u': 20, 'fp': 0.95, 'r': 35, 'v': 1.0, 't': 5},
        {'u': 60, 'fp': 0.75, 'r': 65, 'v': 4.5, 't': 15},
        {'u': 35, 'fp': 0.80, 'r': 70, 'v': 3.0, 't': 20}
    ]

    print("=== TESTE AUTOMÁTICO - 5 CENÁRIOS ===")

    # Para cada cenário, executa o processamento fuzzy e mostra o resultado
    for i, c in enumerate(cenarios, 1):
        print(f"\nCenário {i}:")
        print(f"Umidade: {c['u']}%, FP: {c['fp']}, Ruído: {c['r']}dB, Vibração: {c['v']}mm/s, Tempo: {c['t']}h")

        simulador.input['umidade'] = c['u']
        simulador.input['fator_potencia'] = c['fp']
        simulador.input['ruido'] = c['r']
        simulador.input['vibracao'] = c['v']
        simulador.input['tempo_operacao'] = c['t']

        simulador.compute()
        resultado = simulador.output['risco_falha']

        if resultado <= 35:
            status = "BAIXO"
        elif resultado <= 75:
            status = "MÉDIO"
        else:
            status = "ALTO"

        print(f"→ Risco: {resultado:.2f}% ({status})")

# Execução do programa: permite escolher entre análise manual ou teste automático
if __name__ == "__main__":
    opcao = input("1-Análise manual / 2-Teste automático: ")
    if opcao == '1':
        analise_motor()
    else:
        teste_cenarios()